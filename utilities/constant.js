const labelList = {
  insertSuccess: 'successfully inserted',
  updateSuccess: 'successfully updated',
  deleteSuccess: 'successfully deleted',
  transactionSuccess: 'Transaction successful',
  requiredField: 'Field can not be blank',
  serverError: 'Something went wrong',
  emptyPageDetails: 'Page not defined',
  default: 'SUCCESS',
  invalidInput: 'Invalid input',
  invalidFile: 'Invalid file',
  invalidVenue: 'Invalid venueId',
  invalidVendor: 'Invalid vendorId',
  invalidRecipient: 'Invalid recipient',
  invalidOrder: 'Invalid orderId',
  invalidCart: 'Invalid cartId',
  parseError: 'JSON parse error',
  InvalidMenuList: 'All item should be of same vendor',
  vendorNotAvail: 'Vendor is not available',
  vendorLocked: 'Vendor is locked',
  menuItemNotAvail: 'Menu Item not available',
  deliveryAgentNotAvail: 'Delivery Agent not available',
  invalidCoupon: 'Invalid coupon',
  minimumOrderAmount: 'Minimum order amount should be ',
  invalidIssueReason: 'Invalid issue reason',
  invalidMedia: 'Invalid mediaId',
  invalidCrew: 'Invalid crew',
  invalidDa: 'Invalid delivery Agent',
  invalidProblem: 'Invalid orderProblemId',
  maxLimitOfCoupon: 'Coupon reached Maximum Limit',
  maxLimitofIssue: 'Delivery Agent has already submitted issue on same order',
  forbiddenUser: 'Forbidden user',
  forbiddenScope: 'Forbidden scope',
  deliveryAgentHasOrders: 'Delivery Agent Still has Orders to Complete',
  requiredMenuItem: 'Please select all required menuItem',
  daAppliedBreak: 'You have already applied for the break',
  vendorTagExist: 'Vendor Tag already exist',
};
const errorName = {
  validationError: 'ValidationError',
  typeError: 'TypeError',
  castError: 'CastError',
  conflict: 'ConflictError',
  invalidOtp: 'Invalid OTP',
  unauthorized: 'UnauthorizedError',
  rateLimit: 'Please try after some time',
  invalidNumber: 'Invalid number',
};
const reference = {
  deliveryLocation: ['venueId', 'deliveryAreaId'],
  deliveryArea: ['venueId'],
  venue: ['mediaId'],
  vendorTag: ['vendorId'],
  vendorMenuSection: ['menuItems.menuItemId', 'vendorId'],
  menuItem: ['vendorId', 'mediaId', 'vendorTagId'],
  menuItemAvailableHour: ['menuItemId'],
  menuItemTags: ['vendorTagId'],
  cart: ['menuItems'],
  vendor: ['venueId', 'profilePicture', 'userId', 'mediaId', 'deliveryAreaId', 'deliveryLocationId',
    'crewIds'],
  otp: ['recipientId'],
  recipient: ['venueId'],
  deviceId: ['recipientId', 'userId'],
  orderStatus: ['orderId', 'cancellationReasonId'],
  rating: ['orderId', 'recipientId'],
  agentsWorkingHour: ['venueId', 'userId'],
  deliveryAgents: ['venueId', 'userId', 'profilePicture', 'deliveryAreaId'],
  transaction: ['recipientId', 'orderId'],
  issue: ['voiceRecordingId', 'orderId', 'reporter', 'assignee', 'orderProblemId'],
  order: ['vendorId', 'mediaId', 'vendorTagId', 'assignee', 'deliveryAreaId', 'discountCodeId',
    'deliveryLocationId', 'menuItems.menuItemId'],
  consumerDiscountCode: ['recipientId', 'orderId', 'discountCodeId'],
  discountCode: ['venueId'],
  geoLocation: ['userId', 'recipientId', 'deliveryAreaId'],
  noShow: ['userId'],
};
module.exports = { labelList, errorName, reference };
